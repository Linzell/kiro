// eslint-disable-next-line import/no-extraneous-dependencies
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import type { RootState } from '$/index';
import Page from '#/page';

/**
 * Interface for Redux store
 * @interface pagetoreInterface
 * @property {Array<Page>} pages- Collection of pages
 */
interface pageStoreInterface {
  pages: Array<Page>;
}

/**
 * Initial state for Redux store
 * @type {pageStoreInterface}
 */
const initialState: pageStoreInterface = {
  pages: [],
};

/**
 * Slice for Redux store
 */
const pagesSlice = createSlice({
  name: 'pageStore',
  initialState, // Define initial state
  reducers: {
    /**
     * Add a page to the collection
     */
    addPage: (state, action: PayloadAction<Page>) => {
      state.pages.push(action.payload);
    },
    /**
     * Remove a page from the collection
     */
    removePage: (state, action: PayloadAction<Page>) => {
      state.pages = state.pages.filter((page) => page.id !== action.payload.id);
    },
    /**
     * Update a page in the collection
     */
    updatePage: (state, action: PayloadAction<Page>) => {
      state.pages = state.pages.map((page) => {
        if (page.id === action.payload.id) {
          return action.payload;
        }
        return page;
      });
    },
  },
});

// Export actions generated by "createSlice()":
export const { addPage, removePage, updatePage } = pagesSlice.actions;

// Export selector generated by "createSlice()":
export const selectPages = (state: RootState) => state.pageStore.pages;

// Export reducer generated by "createSlice()":
export default pagesSlice.reducer;
