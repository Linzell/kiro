// eslint-disable-next-line import/no-extraneous-dependencies
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getTagStore } from '%/importDataStorage';
import type { RootState } from '$/index';
import type Tag from '#/tag';

/**
 * Interface for Redux store
 * @interface tagStoreInterface
 * @property {Array<Tag>} tags- Collection of tags
 */
interface tagStoreInterface {
  tags: Array<Tag>;
}

/**
 * Initial state for Redux store
 * @type {tagStoreInterface}
 */
const initialState: tagStoreInterface = {
  tags: getTagStore(),
};

/**
 * Slice for Redux store
 */
const tagsSlice = createSlice({
  name: 'tagStore',
  initialState, // Define initial state
  reducers: {
    /**
     * Add a tag to the collection
     */
    addTag: (state, action: PayloadAction<Tag>) => {
      state.tags.push(action.payload);
      localStorage.setItem('tagStore', JSON.stringify(state.tags));
    },
    /**
     * Remove a tag from the collection
     */
    removeTag: (state, action: PayloadAction<Tag>) => {
      state.tags = state.tags.filter((tag) => tag.id !== action.payload.id);
      localStorage.setItem('tagStore', JSON.stringify(state.tags));
    },
    /**
     * Update a tag in the collection
     */
    updateTag: (state, action: PayloadAction<Tag>) => {
      state.tags = state.tags.map((tag) => {
        if (tag.id === action.payload.id) {
          return action.payload;
        }
        return tag;
      });
      localStorage.setItem('tagStore', JSON.stringify(state.tags));
    },
  },
});

// Export actions generated by "createSlice()":
export const { addTag, removeTag, updateTag } = tagsSlice.actions;

// Export selector generated by "createSlice()":
export const selectTags = (state: RootState) => state.tagStore.tags;

// Export reducer generated by "createSlice()":
export default tagsSlice.reducer;
