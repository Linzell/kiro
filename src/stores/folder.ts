// eslint-disable-next-line import/no-extraneous-dependencies
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import type { RootState } from '$/index';
import Folder from '#/folder';

/**
 * Interface for Redux store
 * @interface folderStoreInterface
 * @property {Map<string, Folder>} folders - Collection of folders
 */
interface folderStoreInterface {
  folders: Map<string, Folder>;
}

/**
 * Initial state for Redux store
 * @type {folderStoreInterface}
 */
const initialState: folderStoreInterface = {
  folders: new Map(),
};

/**
 * Slice for Redux store
 */
const foldersSlice = createSlice({
  name: 'folderStore',
  initialState, // Define initial state
  reducers: {
    /**
     * Add a folder to the collection
     */
    addFolder: (state, action: PayloadAction<Folder>) => {
      state.folders.set(action.payload.id, action.payload);
    },
    /**
     * Remove a folder from the collection
     */
    removeFolder: (state, action: PayloadAction<Folder>) => {
      state.folders.delete(action.payload.id);
    },
    /**
     * Update a folder in the collection
     */
    updateFolder: (state, action: PayloadAction<Folder>) => {
      state.folders.set(action.payload.id, action.payload);
    },
  },
});

// Export actions generated by "createSlice()":
export const { addFolder, removeFolder, updateFolder } = foldersSlice.actions;

// Export selector generated by "createSlice()":
export const selectFolders = (state: RootState) => state.folderStore.folders;

// Export reducer generated by "createSlice()":
export default foldersSlice.reducer;
