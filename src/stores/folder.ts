// eslint-disable-next-line import/no-extraneous-dependencies
import { createSlice } from '@reduxjs/toolkit';
import Folder from '#/folder';

/**
 * Interface for Redux store
 * @interface folderStoreInterface
 * @property {Map<string, Folder>} folders - Collection of folders
 */
interface folderStoreInterface {
  folders: Map<string, Folder>;
}

/**
 * Initial state for Redux store
 * @type {folderStoreInterface}
 */
const initialState: folderStoreInterface = {
  folders: new Map(),
};

/**
 * Slice for Redux store
 */
const foldersSlice = createSlice({
  name: 'folderStore',
  initialState, // Define initial state
  reducers: {
    /**
     * Add a folder to the collection
     */
    addFolder: (state, action) => {
      // Reducer for adding a folder to the collection:
      // Add a folder to the collection:
      state.folders.set(action.payload.id, action.payload);
    },
    /**
     * Remove a folder from the collection
     */
    removeFolderById: (state, action) => {
      // Reducer for removing a folder from the collection:
      // Remove a folder from the collection:
      state.folders.delete(action.payload);
    },
    /**
     * Update a folder in the collection
     */
    updateFolder: (state, action) => {
      // Reducer for updating a folder in the collection:
      // Update a folder in the collection:
      state.folders.set(action.payload.id, action.payload);
    },
  },
});

// Export actions generated by "createSlice()":
export const { addFolder, removeFolderById, updateFolder } = foldersSlice.actions;

// Export reducer generated by "createSlice()":
export default foldersSlice.reducer;
