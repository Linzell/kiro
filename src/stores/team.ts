// eslint-disable-next-line import/no-extraneous-dependencies
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getTeamStore } from '%/importDataStorage';
import type { RootState } from '$/index';
import type Team from '#/team';

/**
 * Interface for Redux store
 * @interface teamtoreInterface
 * @property {Array<Team>} teams- Collection of teams
 */
interface teamStoreInterface {
  teams: Array<Team>;
}

/**
 * Initial state for Redux store
 * @type {teamStoreInterface}
 */
const initialState: teamStoreInterface = {
  teams: getTeamStore(),
};

/**
 * Slice for Redux store
 */
const teamsSlice = createSlice({
  name: 'teamStore',
  initialState, // Define initial state
  reducers: {
    /**
     * Add a team to the collection
     */
    addTeam: (state, action: PayloadAction<Team>) => {
      state.teams.push(action.payload);
      localStorage.setItem('teamStore', JSON.stringify(state.teams));
    },
    /**
     * Remove a team from the collection
     */
    removeTeam: (state, action: PayloadAction<Team>) => {
      state.teams = state.teams.filter((team) => team.id !== action.payload.id);
      localStorage.setItem('teamStore', JSON.stringify(state.teams));
    },
    /**
     * Update a team in the collection
     */
    updateTeam: (state, action: PayloadAction<Team>) => {
      state.teams = state.teams.map((team) => {
        if (team.id === action.payload.id) {
          return action.payload;
        }
        return team;
      });
      localStorage.setItem('teamStore', JSON.stringify(state.teams));
    },
  },
});

// Export actions generated by "createSlice()":
export const { addTeam, removeTeam, updateTeam } = teamsSlice.actions;

// Export selector generated by "createSlice()":
export const selectTeams = (state: RootState) => state.teamStore.teams;

// Export reducer generated by "createSlice()":
export default teamsSlice.reducer;
