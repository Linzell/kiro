// eslint-disable-next-line import/no-extraneous-dependencies
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import NewUser from '#/factorys/userFactory';
import type { RootState } from '$/index';
import User from '#/user';

/**
 * Interface for Redux store
 * @interface userStoreInterface
 * @property {Array<User>} users - Collection of users
 * @property {User} currentUser - Current user
 * @property {string} privateKey - Private key for current user
 */
interface userStoreInterface {
  users: Array<User>;
  currentUser: User;
  privateKey: string;
}

// TODO: Temporaire, Ã  supprimer
function getCurrentUser(): User {
  return new NewUser().factoryMethod(
    '123456789',
    'd4fg56df4g654df65g4d65f4g65df4',
  );
}

/**
 * Initial state for Redux store
 * @type {userStoreInterface}
 */
const initialState: userStoreInterface = {
  users: [],
  currentUser: getCurrentUser(),
  privateKey: '456',
};

/**
 * Slice for Redux store
 */
const usersSlice = createSlice({
  name: 'userStore',
  initialState, // Define initial state
  reducers: {
    /**
     * Add a user to the collection
     */
    addUser: (state, action: PayloadAction<User>) => {
      state.users.push(action.payload);
    },
    /**
     * Remove a user from the collection
     */
    removeUser: (state, action: PayloadAction<User>) => {
      state.users = state.users.filter((user) => user.id !== action.payload.id);
    },
    /**
     * Update a user in the collection
     */
    updateUser: (state, action: PayloadAction<User>) => {
      state.users = state.users.map((user) => {
        if (user.id === action.payload.id) {
          return action.payload;
        }
        return user;
      });
    },
    /**
     * Add current user to the collection
     */
    addCurrentUser: (state, action: PayloadAction<User>) => {
      state.currentUser = action.payload;
    },
    /**
     * Remove current user from the collection
     */
    removeCurrentUser: (state) => {
      state.currentUser = {} as User;
    },
    /**
     * Update current user in the collection
     */
    updateCurrentUser: (state, action: PayloadAction<User>) => {
      state.currentUser = action.payload;
    },
    /**
     * Set private key for current user
     */
    setPrivateKey: (state, action: PayloadAction<string>) => {
      state.privateKey = action.payload;
    },
    /**
     * Load private key for current user
     */
    loadPrivateKey: (state) => {
      state.privateKey = localStorage.getItem('privateKey') ?? '';
    },
  },
});

// Export actions generated by "createSlice()":
export const {
  addUser,
  removeUser,
  updateUser,
  addCurrentUser,
  removeCurrentUser,
  updateCurrentUser,
  setPrivateKey,
  loadPrivateKey,
} = usersSlice.actions;

// Export selectors generated by "createSlice()":
export const selectUsers = (state: RootState) => state.userStore.users;
export const selectCurrentUser = (state: RootState) => state.userStore.currentUser;

// Export reducer generated by "createSlice()":
export default usersSlice.reducer;
